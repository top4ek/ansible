unbind C-b
set -g prefix C-Space
bind C-a send-prefix

set -ag terminal-features ",{{ temu_term }}:RGB"
set -g default-terminal "{{ temu_term }}"
set -g display-time 4000
set -g focus-events on
set -g history-limit 50000
set -g visual-activity off
set -gq allow-passthrough on
set -s escape-time 0
set-window-option -g aggressive-resize on

setw -g mode-keys vi
set -g base-index 0
setw -g pane-base-index 0

set -g mouse on
set -s set-clipboard off

bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "wl-copy && wl-paste -n | wl-copy -p"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "wl-copy && wl-paste -n | wl-copy -p"
bind p run "wl-paste -n | tmux load-buffer - ; tmux paste-buffer"

unbind j
unbind k
unbind h
unbind l
bind -r "<" swap-pane -U
bind -r ">" swap-pane -D

bind -r M-k resize-pane -U 5
bind -r M-j resize-pane -D 5
bind -r M-h resize-pane -L 5
bind -n M-l resize-pane -R 5

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -T copy-mode-vi 'C-\' select-pane -l

unbind '"'
unbind %
bind | split-window -h
bind - split-window -v
bind c new-window -c '#{pane_current_path}'
bind r source-file ~/.tmux.conf

battery_level="#(cat /sys/class/power_supply/BAT0/capacity)"
battery_low="#{e|<:$battery_level,15}"
battery_colour="#{?$battery_low,colour196,colour246}"
battery_icon="#(cat /sys/firmware/acpi/platform_profile | cut -c1-1) #{?$battery_low,󰁺,󰂂}"

set -g status "on"
set -g status-style bg=colour237,fg=colour223
set-window-option -g window-status-style bg=colour113,fg=colour237
set-window-option -g window-status-activity-style bg=colour237,fg=colour248
set-window-option -g window-status-current-style bg=red,fg=colour237
set -g pane-active-border-style fg=colour250
set -g pane-border-style fg=colour237
set -g message-style bg=colour239,fg=colour223
set -g message-command-style bg=colour239,fg=colour223
set -g display-panes-active-colour colour250
set -g display-panes-colour colour237
set-window-option -g clock-mode-colour colour109
set-window-option -g window-status-bell-style bg=colour167,fg=colour235
set -g status-position top
set -g status-justify "left"
set -g status-left-style none
set -g status-left-length "80"
set -g status-right-style none
set -g status-right-length "80"
set-window-option -g window-status-separator ""
set -g status-left "#[bg=colour239,fg=${battery_colour}] ${battery_icon} ${battery_level}% #[bg=colour237,fg=colour239,nobold,noitalics,nounderscore]"
set -g status-right "#[bg=colour237,fg=colour239 nobold, nounderscore, noitalics]#[bg=colour239,fg=colour246] %Y-%m-%d  %I:%M %p"

set-window-option -g window-status-current-format "#[bg=colour113,fg=colour237,nobold,noitalics,nounderscore]#[bg=colour113,fg=colour0] #I #[bg=colour113,fg=colour0,bold] #W#{?window_zoomed_flag,*Z,} #[bg=colour237,fg=colour113,nobold,noitalics,nounderscore]"
set-window-option -g window-status-format "#[bg=colour28,fg=colour237,noitalics]#[bg=colour28,fg=colour0] #I #[bg=colour28,fg=colour0] #W #[bg=colour237,fg=colour28,noitalics]"

if-shell "[ -f ~/.tmux.conf.local ]" 'source ~/.tmux.conf.local'

new-session -s "{{ admin_user }}"
rename-window -t "{{ admin_user }}:0" Misc

{% if tmux_windows is defined %}
{% for window in tmux_windows %}
new-window -t "{{ admin_user }}"{% if window.path is defined %} -c "{{ window.path }}"{% endif %} -n "{{ window.name }}"{% if window.command is defined %} "{{ window.command}}"{% endif %}

{% if window.split %}
split-window -t "{{ admin_user }}"{% if window.size is defined %} -l {{ window.size }}{% endif %} -h{% if window.path is defined %} -c "{{ window.path }}"{% endif %}

{% endif %}
{% endfor %}
{% endif %}

select-window -t 0
